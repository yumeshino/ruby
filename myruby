開発環境の起動、停止
立ち上げコマンド
$docker-compose up -d

$docker-compose stop
コンテナの停止

$docker-compose down
コンテナの削除
削除しても再度立ち上げコマンドで立ち上がる


$docker-compose up 
-dをつけない場合、コンテナのログを確認できる
サイトにアクセスした際のログを確認できる
しかし、この状態でCntrl+cで強制終了するとrailsがどのプロセス番号で起動しているのか記録しているserver.pidファイルが残ってしまい、次回の起動に失敗することがある
 A server is already running. Check /app/tmp/pids/server.pid.
->このようなエラーがでたら、pidファイルを削除して再度起動コマンドを実行する

http://localhost:3000/rails/info/routes

biding.pry
単語
ctrl+com+f 検索

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
railsを用いたwebページの作成（rootの設定、controller・viewの作成）
１rootingの設定
rooting設定ファイル:config/routes.rb
rootingの定義はブロック内に記述する
root 'boards#index'
rootは、この環境開発の場合localhost:3000にアクセスがきた場合のrootingを意味する
rootの後ろには処理するcontrollerとmethodを指定する
ここでは、localhost:3000にアクセスが来たら、BoardsControllerクラスのindexメソッドを実行するように定義している

２controllerの作成
controllerファイル:app/conntorollerディレクトリの中に作成する
今回作成するのはBoardsControllerなので、app/controller/boards_controller.rbを作成する
controllerを作成する際は小文字で'controller名_controller.rb'の形で作成する


ファイルの中身の設定
①BoardsControllerクラスを定義
  キャメルケースで記述する
  rootの定義に合わせてクラス名が決まる
②ApplicationControllerの継承
  基本的にcontrollerを定義する際はApplicationControllerを継承する
  これによって定義したクラスがcontrollerとして機能するようになる
③indexmethodの定義
  クラスの中にはrootに指定したようにindexmethodを定義する
  rootで定義したmethodのことをアクションという
  今回の場合だと、このindexmethodのことをboardscontrollerのindexアクションと呼ぶ
class BoardsController < ApplicationController
 def index
 end
end

３viewの作成
app/viewsの下にcontroller名と同じの名前のディレクトリを作成して、その下に各アクションに対応するviewを作成する
今回はboardscontrollerなのでapp/views/boardsディレクトリを作成する
indexアクションが呼び出された場合に使用するviewを作成する
今回はindexアクションンのviewなのでindex.html.erbとなる
このルールに合わせてviewを作成することにより自動的にindex.html.erbの内容がwebページに表示される
webページのコンテンツを表示する処理のことをレンダリングという
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

RailsでBootstrapを導入する

Bootstrapとは？
基本的にwebページのでデザインはHTMLとCSSを使って書くが、Bootstrapwo使用する￥ことにより、１からCSSを書いてデザインを考えて作成する必要がなく、Bootstrapで定義されたデザインやレイアウトの枠組みを取り入れることができる
BootstrapのようなデザインのテンプレートととなるCSSのことをCSSフレームワークと呼ぶ

導入方法
１、gemファイルにBootstrapをインストールする
  gem 'bootstrap','~> 4.0.0'
  gem 'mini_racer'
  gemファイルを変更した際は
  docker-compose buildコマンドをターミナルで実行することでgemファイルのgemがインストールされる

２、application.cssファイルの拡張子を.scssに変更する
app/assets/stylesheets配下にあるapplication.cssをapplication.scssに変更する
application.scssの中の最初から記載されている
require_treeやrequire_selfはBootstrapの動作に影響を与えるため削除する
そして、BootstrapのCSSを読み込むためにインポートの定義を追加する
@import "bootstrap"

３、application.jsファイルを編集する
app/assets/javascripts配下にあるapplication.jsを編集する
元々書いてあるjqueryをjquery3に変更
Bootstrapの機能を使うために下の2行を追加
//= require popper
//= require bootstrap-sprokets
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

Modelファイルの作成

Modelとは？
Modelはデータベースとやり取りを行うクラスのこと
データベースとは何らかの情報（人物の情報や商品の情報など）を集め、データの操作や検索を行えるようにしたもの

マイグレーションファイル
データベースにテーブルを作成したり、既存のテーブルの定義を変更する場合に使用する

作成方法
docker-compose run web bundle exec rails g model board name:string title:string body:text

docker-compose run web・・webサービスのコンテナ内で後ろに続くコマンドを実行することを意味する

bundle exec rails g model・・Railsプロジェクトにインストールされたrailsコマンドを実行する。rails g modelでマイグレーションファイルやモデルのファイルなどが作成される。gはジェネレートの略。

board name:string title:string body:text・・boardは作成するmodel名・boardモデルの作成によってboardsテーブルを作成するマイグレーションファイルが作成される。基本的にモデル名は単数形、テーブル名は複数形というルール。
それ以降はテーブルに作成するカラム:カラムの型
ここではString型のnameカラム、String型のtitleカラム、Text型のbodyカラムを作成している



マイグレーションファイルの確認
マイグレーションファイルはdb/migrateディレクトリーの下に作成される。ファイル名にはジェネレートコマンドを実行した日時がつく
マイグレーションファイルにはデータベースにテーブルを作成する為の定義が記載される
マイグレーションファイルとして機能するようにActiveRecord::migrationを継承している
メソッドにはchangeメソッドが定義されており、メソッド内に定義されたテーブルの作成や修正を行うことができ、間違った場合などに元に戻すこともできるメソッド


モデルファイルの確認
モデルファイルはapp/modelsディレクトリーにある
モデルのファイル名を単数形にするのはモデルで共通のルール
ApplicationRecordはモデルとして機能させるために継承されている
モデルにはマイグレーションファイルと違い、カラムの情報は渡されていないが、自動的にboardsテーブルに作成されたカラムのデータを扱うことができる。
命名規則によりboardモデルは、boardsテーブルと関連付いており、boardsテーブルの各レコードをひとつのboardクラスのオブジェクトとして扱うことができる
こういったデータベースの各レコードをデータのORマッパーという


マイグレーションの実行
マイグレーションファイルが作成されただけだとテーブルの作成は行われないのでマイグレーションを実行する
docker-compose run web bundle exec rake db:migrate
このコマンドでまだ未実行のマイグレーションファイルの内容を実行する。今回だとboardsテーブル作成のマイグレーションが実行される
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

RESTfullについて

RESTとは？
・アプリケーションの設計方法の一つ
・HTTPメソッドを使ってwebのリソースを操作する際の設計方法
  →HTTPメソッドとはブラウザでwebページを見る際やフォームを入力したデータを送信する際に裏側でブラウザからサーバーに送信されている命令のこと
・Railsnにおいてリソースとはユーザーや掲示板の情報など、主にデータベースのテーブルのデータのこと


ブラウザから送信するHTTPメソッドと役割
ブラウザから送信できるhttpメソッドはいくつかの種類があるがRails主に使用されるのは以下の4つ
GET・・・・・・リソースの取得/掲示板アプリで言えば掲示板の情報を取得する際にGETメソッドを使用する
POST・・・・・リソースの作成/HTMLのフォームタグを書く際にPOSTメソッドを使用するように指定することでフォームを確定した際にPOSTメソッドでリクエストが送信される
PATCH/PUT・・・リソースの更新/掲示板アプリで言えば一度書き込んだ掲示板の文章を修正する場合などに使用される
DELETE・・・・リソースの削除
webブラウザからサーバーにリクエストを投げる際はこのようにやりたいことによってメソッドを使い分ける
httpメソッドを使用したからリソースの取得やリソースの作成を自動で行ってくれる訳ではなく、どのhttpメソッドでリクエストがきたら何を行うのかを記述するのはプログラマーの仕事

httpメソッドとコントローラー、アクションの対応
httpメソッドとパスの組み合わせでサーバーにリクエストがきてルーティングによってコントローラーのアクションに転送される
（画像）

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ヘルパーメソッドと<%%>記法について

ヘルパーメソッドとは？
ヘルパーメソッドとはビューの中で使用できるメソッド
ヘルパーを使用することで読みやすい形で、簡潔にHTMLを記述することができる

<% %>とは？
erbのテンプレートファイルにおいては、<% %>で囲った中にはRubのコードを書くことができる。
<%= %>のようにイコールをつけた場合は、Rubyのコードの実行結果をテンプレート（ビュー）内に埋め込むことができる。


ヘルパーメソッドと<%%>記法の一例
<%= form_for board do |f| %>
  <div class="form-group">
    <%= f.label :name, '名前' %>  
    <%= f.text_field :name, class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= f.label :title, 'タイトル' %>
    <%= f.text_field :title, class: 'form-control' %>
  </div>
  <div class="form-group">
    <%= f.label :body, '本文' %>
    <%= f.text_area :body, class: 'form-control', rows: 10 %>
  </div>
   <%= f.submit '保存', class: 'btn btn-primary' %>
<% end %>

  上記のコードで使われているヘルパーメソッドは以下の通り
  form_for・・・・第一引数にはインスタンス変数を指定することでモデルのデータを新規に作成するフォームを作ることができる
  f.label・・・ラベル名の出力を行うメソッド。第一引数にモデルのプロパティ名、第二引数に表示するラベル名を指定する
  f.text_field・・テキストを入力するためのインプット要素を出力している。第一引数にモデルのプロパティ名、第二引数にはハッシュ形式でインプットタグのclass属性を指定する
  f.text_area・・テキストエリアタグを出力している。第一引数は同様にモデルのプロパティ名、第二引数以降はテキストエリアのタグの属性の指定
  f.submit・・submitボタンの作成。第一引数はボタンの表示名、第二引数がボタンタグの属性

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
デバックツールpry-byebugの導入


導入方法
１、gemファイルに追記
開発時のみ必要なgemは、group：developmentのブロック内にgemを追加する
デバックツールが不要な本番環境では余計なgemをインストールせずに済む
gem 'pry-byebug'

２、pry-byebugをインストール
gemを追加したので
$docker-compose build
を実行する

３、コンテナの再起動
gemをインストールしたら
$docker-compose up -d
で一度コンテナを再起動させる


使用方法
dockerの環境でpry-byebugを使用するには Railsコンテナにアタッチして接続する必要があるので、 Railsコンテナ名を確認してからそのコンテナに対してアタッチを実行する

Railsコンテナ名の確認方法
以下のコマンドでコンテナの詳細を確認できる
$docker ps
（画像）

１、コンテナにattachする
コンテナ名が確認できたらアタッチコマンドの後ろにコンテナ名を指定して実行
$docker attach （コンテナ名）
これでpry-byebugを仕込んだ位置でコードをデバックすることができる


２、デバッカーを仕込む
デバックを行いたい位置に以下のコード書く
binding.pry
（画像）
これによりbinding.pryと書いた位置が実行されたタイミングでプログラムが一時停止してデバックを行うことができる

３、コンソールで動作を確認する
コードを記載した画面をweb上で開くか、リロードしてアタッチしたコンソールを確認すると以下のような画面になる
（画像）
binding.pryの位置にきてプログラムが一時停止している状態なのでここで任意のコードを実行することができる
classの内容を確認したり、インスタンス変数を操作したりできる
（画像）

binding.pryをデバックしたい位置に書くことでプログラムの実行を止めて変数の内容を確認したり、値をセットしたりメソッドを呼び出したりといったことが行えるので実際の環境現場でも頻繁に使われるスキル


pry−byebugを止める
デバッカーから抜ける方法
exitかcontinueを実行する
（画像）

アタッチから抜ける方法
Ctrlキーを押しながらp、qの順にキーを押すとアタッチが解除される

binding.pryコードを削除する
binding.pryを書いたままだと画面を表示する度に処理が止まってしまうので使い終わったら忘れずに消すこと
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

フォームに入力した掲示板データを保存する流れ（paramsメソッド、createメソッド、permitメソッド）

掲示板などに書き込みをしたものをデータベースに保存する流れやポイントについてまとめる

createアクションへのルート
１、rooting設定
rooting設定ファイル:config/routes.rb
（画像）
表を確認するとcreateアクションのメソッドをパスを確認して以下のコードを記載
post 'boards',to:'boards#create'

２、createアクションの追加
コントローラーを設定する
ファイルの場所:app/controllers/boards_controller.rb
def create
end
createメソッドでPOSTされたデータを受け取るにはparamsという変数を使う
createメソッドは引数にキーとバリューのセットの情報を渡す。
paramsで取得した情報はその状態になっているため、User.create(params)みたいすればフォームの情報を保存することができる
しかし、paramsにはフォームで入力した情報以外のものが入っているためストロングパラメータというものを使用して制限をかっける必要がある

params変数とは？
paramsとは、フォームなどによって送られてきた情報（パラメーター）を取得するメソッド

ストロングパラメーターとは？
ストロングパラメータは、Web上から受けつけたパラメータが、本当に安全なデータかどうかを検証した上で、取得するための仕組み
安全ではないデータの登録、更新を防いでくれる


３、ストロングパラメータの設定
ストロングパラメータの設定はコントローラーファイルに記載する
コードは以下の通り
private

def board_params
  params.require(:board).permit(:name, title, :body)
end
✅privateメソッドを呼ぶことでparamsの中にあるboardキーの中の
name,title,bodyの値のみを取得することができる
✅paramsのrequireメソッドでモデル名のキーを指定しpermitメソッドでそのモデルのプロパティのキーを許可する

４、データベースに保存する
  boardモデルのcreateソッドを定義して保存する
  以下のコードを追記
  def create 
    Board.create(board_params)
  end
  （画像）
  creteメソッドの引数に保存するパラメータを渡すことでデータベースに保存することができる
  ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

日本時間の設定とフォーマットの定義

今回は日付データのフォーマットの定義について学んだのでメモ
（画像）
デフォルトで日時や日付を取得した場合、上のような表記で表示される
表示機会の多い日時を Railsでは特定のフォーマットに名前をつけて、読みやすい形にして管理することができる。

１、日本時間に修正する
  設定ファイル:config/application.rb
  （画像）
  Applicationクラスの中に下のコードを追記
  config.time_zone = 'Tokyo'
  有効化する為に Railsコンテナを再起動させる
（画像）

２、フォーマットの定義
１、設定ファイル:config/initializers/time_formats.rbを作成する
２、見やすいような形で表示形式を定義
    Time::DATE_FORMATS[:datetime_jp] = '%Y年 %m月 %H時 %M分'
  
  タイム型のフォーマットの場合はTime::DATE_FORMATSに任意の名前のキーを設定する。なので:datetime_jpの部分はなんでもOK
  configディレクトリーの配下の設定を修正したので一度 Railsコンテナを再起動させる

  ３、Viewファイルの設定
  設定ファイル:app/views/boards/index.html.erb
  作成したフォーマットを使用する為にはto_sメソッドを呼び出して引数にフォーマット名を指定する
  （コードの画像）
        <td><%= board.created_at.to_s(:datetime_jp) %></td>
        <td><%= board.updated_at.to_s(:datetime_jp) %></td>

  （表示画像）
  同じ日時のフォーマットを何度も使用する場合にこのように設定としてフォーマットを定義し、それを使い回すのがベター
    ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ブラウザでルーティングの設定の確認をする方法とリソースベースルーティング

ブラウザでルーティングの設定の確認確認方法
/rails/info/routes
このパスにアクセスすると設定済みのルートの情報を確認できる

現在のアプリケーションで利用可能なルーティングをすべて表示するには、サーバーが development 環境で動作している状態でhttp://localhost:3000/rails/info/routesをブラウザで開く

（画像）
そうすると定義済みのルート一覧が表示される
一番左はパスのURLを表示するために使用できるヘルパーメソッド
例えばboards_pathというヘルパーメソッドを呼び出すと/boardsのURLを返す
（画像）


リソースベースルーティング

リソースベースルーティングでルーティングを設定することで下記のコードを1行の設定で書くことができる

resources :boards
このようにresources後にシンボルで複数形のリソース名を指定することでRESTfulで解説した基本的なルーティング設定を追加することができる
（画像）
内容を確認するとトータルで8つのルートが設定された状態になる
リソースベースルティングではこのように自動で8つのルートが設定される

onlyオプション
リソースベースルティングでは自動で8つのルートが設定されるが全部を使用しないという場合はonlyというオプションで使用するルーティングだけに制限することができる
resources :boards,only[:index, :new, :create, :show]
これによりonlyに設定したindex,new,create,showアクションへのルートだけに制限される
（画像）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
パーシャルで共通のviewを共有する

パーシャルとは？
パーシャルを使用することでview内のコードをいくつもファイルに分割して書き出し、他のテンプレートでも使い回すことができる

パーシャルを使うメリット
例えば掲示板のフォームなどは新規作成の画面と編集画面で同じ作りになることが多いが、同じフォームを複数のviewに記述するのは無駄が多くなり修正が入る場合には個別に同じ修正が必要になる。こういった共通のパーツはパーシャルとして切り出して再利用するのがベター


パーシャルの作成方法

パーシャルの命名規則
パーシャルの名前はファイル名の先頭に＿（アンダースコア）つける
_form.html.erb

他のファイルからパーシャルを呼び出す
共通で使いたい部分をパーシャルとして切り出したら次は使いたいファイルでパーシャルを呼び出す
共通部分は削除する
次に作成したパーシャルを呼び出すには次のコードを記載する
<%= render partial: 'form' %>
✅パーシャルを呼び出すにはrenderメソッドを使う
✅その後ろにハッシュ形式でアンダースコアを省いた形で呼び出すパーシャル名を指定
✅partialの後に：（コロン）の後ろに文字列で記載する
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
コントローラーのフィルター機能・リファクタリング

リファクタリングとは？
リファクタリングとはアプリケーションの動作を変えずにコードを整理して酔いやすくしたり簡潔に書き直したりする作業のこと


リファクタリングの例
下のコードのようにいたるところでfindメソッドによるboardオブジェクトの取得が書かれているので、これをリファクタリングしていく
（画像）

beforeフィルターを使って簡潔にまとめる
先ほどの画像のように書くアクションで重複しているコードがあった場合、それをメソッド化して書くアクションが動く前にbefore_actionでそのメソッドを実行させたりする

コントローラーのファイルに以下のコードを追記
 def set_target_board
    @board = Board.find(params[:id])
  end
（画像）

ひとまとめのメソッドを定義する
各アクションが呼び出される前に実行したメソッドを定義する
✅外部から呼び出されることはないのでprivateメソッドとしてboardオブジェクトをfindで取得するメソッドを定義している
こうすることによりコードの可読性がよくなるのと、コントローラー以外で呼び出された時にエラーが出るのを防ぐことができる
✅他のメソッドからも参照できるように取得したオブジェクトは＠boardのインスタンス変数に格納している

beforeアクションの設定
作成したメソッドが各アクションの呼び出し前に実行されるようにbeforeアクションを設定する
beforeアクションとは、コントローラーの全てのアクションが実行される前になんらかの処理を行うときに使用するもの
before_action :set_target_board
（画像）
引数に実行したメソッドをシンボルで書いて定義すると各アクションが実行される前に自動的にset_target_boardメソッドが呼び出される
しかし、この書き方だと全てのアクションの前にこのメソッドが呼び出されてしまうので、特定のアクションでのみ実行されるよう設定する

onlyオプション
特定のアクションの時にだけbefore_actionを使いたい時に設定する
下記のようにコードを書く
before_action :set_target_board, only: %i[show edit update destroy]

％記法
✅コードをシンプルに記述することができる記法
✅%iはシンボルの配列を作り出すことができる
✅%wとすると文字列の配列を作り出すことができる
記述するコードが減る為、可読性が上がったりタイプミスによるエラーが出る確率を減らすことができる

不要になった箇所のコードを消してリファクタリングする
（画像）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ページネーションの実装とseedを使ったダミーデータの作成方法

ページネーションとは一覧ページに表示する件数が多い場合に1ページに全件表示するのではなく複数のページに分割して表示する機能こと

ダミーデータ作成方法
ページネーションを実装するにあたり動作確認の為にシードという初期データ投入の機能を使用する

seedsファイルの編集
編集ファイル:db/seeds.rb
例えば50県の掲示板データを作成する場合は以下のコードを書く
if Rails.env == 'development'
  (1..50).each do |i|
    Board.create(name: "ユーザー#{i}", title: "タイトル#{i}", body: "本文#{i}")
end
✅Rails.env == 'development'は現在の動作環境を判定する為に使用
  Railsの動作環境
  Railsには基本となる環境が3つある
  test:テスト実行用の環境
  development:環境開発
  production:本番環境
  この環境を切り替えることによって使用するデータベースを分けるなど、環境によって異なる動作をさせることが可能になる
  デフォルトではdevelopmentで動作している
  今回作成したデータは環境開発での動作確認の為に必要なものなのでdevelopment環境でのみデータが追加されるように条件分岐を入れている
✅rangeオブジェクトで1-50までの数字をeachでループしてその中でboardのデータを作成している

シードのデータを反映させる
以下のコマンドで、シードデータの投入が実行される
$docker-compose exec web  bundle exec rake db:seed
✅docker-compose exec web の部分で起動中のRailsコンテナの後に続くコマンドを実行
✅bundle exec rake db:seedの部分でseeds.rbの内容を読み込んで実行

表示結果
このままだと読みいくいのでページネーションの機能を追加していく
（画像）


ページネーションの実装
ページネーションを実装するために便利なkaminariというgemを使って実装する

kaminariをインストールしてファイルを設定
①gemfileに記述
gemfileにkaminariを追加
（画像）

②追加したgemをインストール
$docker-compose buildでgemをインストール

③コンテナの再起動
gemがインストールできたら
$docker-compose upでRailsコンテナを立ち上げ直す

④kaminariの設定ファイルを生成
以下のコマンドでkaminariの設定ファイルを生成する
$docker-compose exec web bundle exec rails g kaminari:config

④ページネーション用のviewファイルを作成
以下のコマンドでkamminariのviewファイルを生成する
このコマンドを実行するとbootstrap4のぺージネーションのデザインに合わせたviewが自動で作成される
$docker-compose exec web bundle exec rails g kaminari:views bootstrap4
ここまででkaminariを使う準備が完了したので、ページネーションが使えるよう他のファイルを設定していく

ページネーションを表示するアクションとviewファイル設定
def index
    @boards = @boards.page(params[:page])
end
（画像）
kaminariをインストールしたことによりpageメソッドが追加される
pageメソッドを呼ぶことにより、引数に指定したページに表示するデータだけを取得してくれる
デフォルトでは、1ページあたり25件のデータを取得する
表示結果
（画像）

2ページ目も表示されるようにページのリンクをviewファイルに追加する
kaminariのインストールによってpagenateヘルパーが追加されているのでそれを呼び出してリンクを出力する
以下のコードを記載する
<%= pagenate @board %>
（画像）
pagenateの引数には一覧表示対象のオブジェクトのリストを渡す
表示結果
（画像）



表示件数を変える方法
kaminariの設定ファイルは
config/initialize/kaminari_config.rb
デフォルトではコメントアウトされているdefault_per_pageの設定を変えることで1ページあたりの表事件数を変更することできる
（画像）
設定を変えたらコンテナを再起動させる
表示結果
（画像）




ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
英語表記を日本語に変える

下記のようにデフォルトで英語表記に設定されている時に日本語に変える手順をメモ
（画像）

設定方法
config/application.rbを編集
以下のコードを追記
config.i18n.default_local = :ja
デフォルトのロケールをjaに設定する
（画像）

表示する日本語を設定
config/locales.ymlを作成して編集する
NextやFirstの表示を日本語で表示させる
下記のコードを記載
ja:
   views:
    pagination:
      first: '最初'
      last: '最後'
      previous: '前'
      next: '次'
      truncate: '...'
  設定が完了したら一度コンテナを再起動させる
  
  表示結果
  （画像）
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
フラッシュを使用したメッセージの表示

フラッシュとは？
フラッシュとはRailsに備わっている機能で、ユーザーのセッションに一時的にデータを保存するもので、フラッシュメッセージとは更新ボタンや削除ボタンを押した時に画面上に表示されるメッセージのこと
セッションとはユーザーの情報管理に使用されるものでデフォルトではブラウザのクッキーに暗号化された状態でデーターを保存するもの

フラッシュメッセージの表示方法

flashメソッドの設定
app/controllers/boards_controller.rbを編集
以下のコードを記載
def create
    board = Board.new(board_params)
      flash[:notice] = "「#{board.title}」の掲示板を作成しました"
      redirect_to board
    end
✅flashの任意のキーに値を設定しておくことで次にその値が参照されるまでデータがセッションに保存される。これは一度参照された時点で自動的にセッション情報から削除される特殊な変数
これを使用することでリダイレクト先のページに値を渡すことができる

viewファイルを編集
フラッシュメッセージを表示する次のタグを追加する
<% if flash[:notice] %>
  <div class="alert alert-primary"><%= flash[:notice] %></div>
<% end %>

✅if文で囲っているのはflash[:notice]がnilの場合には中のdivタグを表示しないため
✅中のdivタグの部分はbootstrapのalertのデザインを使用
✅divタグの中には先ほどコントローラーファイルのアクションで設定したflash[:notice]の値を出力している
表示結果
（画像）

リダイレクトを行う場合は適宜このようなメッセージを表示することで正常に処理が完了したことをユーザーに伝えることができる
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
データの検証を行うバリデーション機能

バリデーションとは？
バリデーションとはデータの検証を行う機能でモデルでデータを保存する前にデータがあらかじめ設定した条件に合うか検証し条件に合わないデータが含まれていた場合には保存処理を中断する
例えば掲示板の場合でいうとタイトルは10文字以内とする条件を設定した場合、11文字以上の文字列がタイトルに渡された場合には保存を行わずエラーを返すことができる

バリデーションの設定方法

モデルファイルの設定
設定ファイル:app/models/board.rb
基本的なバリデーションとして値が存在することと文字数制限をかける
class Board < ApplicationRecord
  validates :name, presence: true, length: { maximum: 10 }
  validates :title, presence: true, length: { maximum: 30 }
  validates :body, presence: true, length: { maximum: 1000 }
end
（画像）
✅presence: trueの設定で値を必須のものにする。フォームで未入力の場合はエラーになる
✅lengthで文字数に制限をかけている。maximumを使用した場合は指定した文字数が最大数となりこれを超える長さだとエラーになる

コントローラーファイルの設定
コントローラーファイルにはバリデーションエラーが派生した時の処理を記述する
設定ファイル:app/controllers/boards_controller.rb
以下のコードを記載
def create
    board = Board.new(board_params)
    if board.save
      flash[:notice] = "「#{board.title}」の掲示板を作成しました"
      redirect_to board
    else
      redirect_to :back, flash: {
        board: board,
        error_messages: board.errors.full_messages
      }
end
✅Board.newはboardのインスタンスを引数のパラメータで初期化するものでこの時点ではデータの保存は行われていない状態
✅newで生成したboardオブジェクトでsaveメソッドを呼ぶことで保存の成功、失敗をtrue、falseブーリアンで取得することができる
✅保存に失敗した場合はelseの中でリダイレクトで新規作成画面に戻している。その際、flashを使用してboardオブジェクトとエラーメッセージを返している。
✅boardオブジェクトを返す理由はリダイレクトしてしまうと入力したフォームのデータが消えてしまうためで、flashでnewメソッドに返して値をセットすることで入力されたままのフォームを表示することができる
✅エラーメッセージの部分はboardオブジェクトでsaveメソッドが呼ばれた時点でバリデーションのチェックが走り、問題があった場合はboard.errorsにエラーなオブジェクトがセットされる。そのエラーを見やすい形で配列にしたものがfull_messagesの部分になる

viewファイルの編集
viewファイルを編集してエラーメッセージを表示させる
<% if flash[:error_messages]  %>
  <div class="alert alert-danger">
    <ul>
      <% flash[:error_messages].each do |msg|  %>
        <li><%= msg %></li>
      <% end %>
    <ul>
  </div>
<% end %>
✅条件分岐はエラーメッセージがあった場合のみ下のタグを表示するためのもの
✅エラーメッセージがある場合にはリスト形式でエラーメッセージを表示している

表示結果
空のまま掲示板を表示するとエラーメッセージが表示される
英語のエラーが出るのはエラーメッセージに対応する日本語が設定されていないため。次の投稿でエラーメッセージを日本語表記にする直す方法を投稿
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
rails-i18n使って基本的なエラーメッセージを日本語で設定する
（画像）

設定方法
gemファイルを編集
①gemファイルに以下を追記
gem 'reils-i18n'

②追加したgemをインストール
$docker-compose buildでgemをインストール

③コンテナの再起動
gemがインストールできたら
$docker-compose upでRailsコンテナを立ち上げ直す

表示結果
これである程度日本語になったが、細かい部分が英語のまま
これは個別に日本語を設定する必要があるので、その方法はこの記事で
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

gem annotateの追加

テーブルの構造をモデルのファイルに自動で書き出してくれる機能
実際のテーブルの構造を確認したい時に、わざわざデータベースに接続しなくてもモデルファイルを見れば理解できるのですごい便利なgem

インストール方法
gemファイルを編集
①gemファイルにannotateを追記
gem 'annotate'
これも開発時のみに使うものなのでdevelopmentのグループ内に追加する

②追加したgemをインストール
$docker-compose buildでgemをインストール

③コンテナの再起動
gemがインストールできたら
$docker-compose upでRailsコンテナを立ち上げ直

④annotationを追加
インストールが完了下ので、既存のファイルにannotationが追記されるように以下のコマンドを実行
$docker-compos  exec web bundle exec annotate
これでモデルファイルなどにテーブルの構造が追記される
（画像）

自動でannotationを追記させる
モデルが追加されるたびに毎回annotationを実行annotationが実行するのは手間なのでマイグレーションでモデルが作成された際に自動でannotationを追記するように設定する
annotateの実行コマンドは次の通り
$docker-compose exec web bundle exec rails g annotate:install
これで次回のマイグレーション以降、自動でannotationが追記される
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
多対多の関係

多対多の関係付けは中間テーブルを作成
中間テーブルにはそれぞれのidを作成する

作成方法
モデルの作成（大元の以外の二つ）
中間テーブルに関しては両端のモデルを紐付けるreferenceのカラムを用意する
→$docker-compose exec web bundle  exec rails g model board_tag_relations board:references tag:references

マイグレーションの実行
この時にからのまま保存できないようにnull:falseの指定を追加してからあマイグレーションを実行する

モデルのアソシエーションの設定
中間テーブルのモデルは作成時点で既に設定が完了している
belongs_toの指定は基本的に全て単数形
タグから掲示板を関連付ける設定
中間テーブルへのhas_manyの設定がひとつ
もう一つは掲示板と関連づけるために中間テーブルを経由して掲示板と関連づける
多対多のアソシエーションを設定するには中間テーブルに対する設定と、中間テーブルを経由して関連づける二つが必要。has_manyの指定では対象は全て複数形で書く
    has_many :board_tag_relations
    has_many :boards,through: :board_tag_relations
掲示板からタグを関連づける設定
タグとは逆で掲示板からタグへのアソシエーションの指定
    has_many :board_tag_relations
    has_many :tags,through: :board_tag_relations





















  

















